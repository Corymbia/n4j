{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC stack with no instances covering vpc and subnet parameters and attributes",
  "Parameters" : {
    "VpcCidr": {
      "Description": "Cidr for vpc",
      "Type": "String",
      "Default": "10.0.0.0/16"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {"Ref": "VpcCidr"},
        "InstanceTenancy": "default",
        "Tags": [
          { "Key" : "vpccftest", "Value" : "vpc" }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key" : "vpccftest", "Value" : "internetgateway" }
        ]
      }
    },
    "AttachInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "Eip": {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags": [
          { "Key" : "vpccftest", "Value" : "eip" }
        ]
      }
    },
    "NatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {"Fn::GetAtt" : [ "Eip", "AllocationId" ]},
        "SubnetId": { "Ref": "Subnet" },
        "Tags": [
          { "Key" : "vpccftest", "Value" : "natgateway" }
        ]
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {"Fn::Select" : [ "0", {"Fn::Cidr": [ {"Ref": "VpcCidr"}, 1, 8 ] } ]},
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          { "Key" : "vpccftest", "Value" : "subnet" }
        ]
      }
    },
    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          { "Key" : "vpccftest", "Value" : "vpc" }
        ]
      }
    },
    "NetworkAclEntryIngress200": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock" : {"Ref": "VpcCidr"},
        "Egress" : false,
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "Protocol" : -1,
        "RuleAction" : "allow",
        "RuleNumber" : 200
      }
    },
    "NetworkAclEntryIngress300": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock" : "0.0.0.0/0",
        "Egress" : false,
        "Icmp" : {
          "Code" : -1,
          "Type" : -1
        },
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "Protocol" : 1,
        "RuleAction" : "allow",
        "RuleNumber" : 300
      }
    },
    "NetworkAclEntryIngress400": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock" : "0.0.0.0/0",
        "Egress" : false,
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "PortRange" : {
          "From" : 32000,
          "To" : 65535
        },
        "Protocol" : 6,
        "RuleAction" : "allow",
        "RuleNumber" : 400
      }
    },
    "NetworkAclEntryIngress500": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock" : "0.0.0.0/0",
        "Egress" : false,
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "PortRange" : {
          "From" : 22,
          "To" : 22
        },
        "Protocol" : 6,
        "RuleAction" : "allow",
        "RuleNumber" : 500
      }
    },
    "NetworkAclEntryEgress200": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock" : {"Ref": "VpcCidr"},
        "Egress" : true,
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "Protocol" : -1,
        "RuleAction" : "allow",
        "RuleNumber" : 200
      }
    },
    "NetworkAclEntryEgress300": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock" : "0.0.0.0/0",
        "Egress" : true,
        "Icmp" : {
          "Code" : -1,
          "Type" : -1
        },
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "Protocol" : 1,
        "RuleAction" : "allow",
        "RuleNumber" : 300
      }
    },
    "NetworkAclEntryEgress400": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock" : "0.0.0.0/0",
        "Egress" : true,
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "PortRange" : {
          "From" : 0,
          "To" : 65535
        },
        "Protocol" : 6,
        "RuleAction" : "allow",
        "RuleNumber" : 400
      }
    },
    "AssociateNetworkAcl": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "SubnetId": {
          "Ref": "Subnet"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          { "Key" : "vpccftest", "Value" : "vpc" }
        ]
      }
    },
    "AssociateRouteTable": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet"
        }
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "NatRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "200.200.200.0/24",
        "NatGatewayId": {
          "Ref": "NatGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "VPC security group",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          { "Key" : "vpccftest", "Value" : "vpc" }
        ]
      }
    },
    "SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "0",
        "ToPort": "65535",
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "-1"
      }
    },
    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "22",
        "ToPort": "22",
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "tcp"
      }
    }
  },
  "Outputs": {
    "VPCId": {
      "Value": {
        "Fn::Join": [
          "-",
          [
            "vpc",
            {
              "Fn::Select": [
                1,
                {
                  "Fn::Split": [
                    "-",
                    {"Ref": "VPC"}
                  ]
                }
              ]
            }
          ]
        ]
      }
    },
    "VPCCidrBlock": {
      "Value": {
        "Fn::GetAtt": [
          "VPC",
          "CidrBlock"
        ]
      }
    },
    "VPCDefaultNetworkAcl": {
      "Value": {
        "Fn::GetAtt": [
          "VPC",
          "DefaultNetworkAcl"
        ]
      }
    },
    "VPCDefaultSecurityGroup": {
      "Value": {
        "Fn::GetAtt": [
          "VPC",
          "DefaultSecurityGroup"
        ]
      }
    },
    "SubnetAvailabilityZone": {
      "Value": {
        "Fn::GetAtt": [
          "Subnet",
          "AvailabilityZone"
        ]
      }
    },
    "AssociateNetworkAclAssociationId": {
      "Value": {
        "Fn::GetAtt": [
          "AssociateNetworkAcl",
          "AssociationId"
        ]
      }
    },
    "ElasticIpAllocationId": {
      "Value": {
        "Fn::GetAtt": [
          "Eip",
          "AllocationId"
        ]
      }
    }
  }
}
